Chapter Two Exercises

Analysis Questions Set 1:
	1. Step uses an array of Locatable objects (which is fish) that it receives from calling
	theEnv.allObjects(). The Simulation constructor is passed the environment as one of its 
	parameters.

	2. The Simulation class works with moving the fish. So SimpleMBSDemo2 is able to construct 
	a Simulation object and call it step method. SimpleMBSDemo2 does not display what the 
	environment originally was because the Simulation has a constructor that does that and the 
	Demo2 also does not have the job of displaying the environment after each movement and how 
	the fish act because that job is up to the step method initiated with the Simulation class.

Analysis Questions Set 2:
	1. (6,3) (7,4) (8,3) (7,2)
	
	2. East
	
	3. South, North
	
	4. (6,3)
	
	5. (5,3)
	
	6. Location has a constructor for row and column parameters and then it also has equals, 
	compareTo, hashCode and toString
	compareTo - compares two locations for ordering
	hashCode - generates a hashCode for the location
	toString - makes the location be represented by a string and outputs a location. This 
	could be used to print the location of a fish if something isn't working to see where it
	is.
	Direction has three constructors - one with no parameters that sets direction to North, 
	one with one parameter that is degrees and another one with one parameter that is direction
	in string form.
	
	Direction has some public methods as well:
	inDegrees - returns the direction value in degrees
	equals(Object other) - checks if other is the same direction as the other direction then 
	returns true or false.
	toLeft - returns a direction 90 degrees to the left of the given direction
	toRight - returns direction 90 degrees to the right of the given direction
	toLeft(int degrees) - returns a direction int degrees to the left of the given direction
	toRight(int degrees) - returns a direction int degrees to the right of the given direction 
	reverse - returns direction reverse of the direction given
	toString - represents direction as string
	randomDirection - returns a random direction in 0 to 360 degrees
	roundedDir - rounds given direction to nearest "cardinal" direction and returns it
	hashCode - makes a hash code for the given Direction object
	
	toString can be used for debugging if needed it can send the direction of the fish.
	
	 
	
Exercise Set 1:
	Complete? yes (file called Chpt2ExercisesSet1)
	
	2. North = 0, East = 90, South = 180, West = 270 and dir3 = 0
	

For later exercises:

Analysis Questions Set 3:
	1. two
	
	2. 2(2, 6)North, 1(7,3)South 
	
	3. false
	
	4. true
	
	5. 2(2,6)North
	
	6. null
	
	7. No because a fish constructor adds the fish to the Environment, so there is no reason to add it again. 
	The fish and the environment need to agree on where the fish is and so the fish is the one to add itself
	so when it is constructed both the constructor and the fish have the same location for it.
	
	8. It is private because you wouldn't want anything else to change the fish location or direction. The fish 
	could move somewhere else because a code messed with initialize and therefore messing up the environment and fish. 
	
	9. You could make theEnv a class variable but if you do that all the fish will live in the same environment 
	and you could not display two simulations at the same time, as you could if theEnv stayed as an instance variable.
	
Exercise Set 2:
	1.
	
	2.
	
	3.
	


Analysis Questions Set 4:	
	1.
	
	2.	
	
		