Chapter Two Exercises

Analysis Questions Set 1:
	1. Step uses an array of Locatable objects (which is fish) that it receives from calling
	theEnv.allObjects(). The Simulation constructor is passed the environment as one of its 
	parameters.

	2. The Simulation class works with moving the fish. So SimpleMBSDemo2 is able to construct 
	a Simulation object and call it step method. SimpleMBSDemo2 does not display what the 
	environment originally was because the Simulation has a constructor that does that and the 
	Demo2 also does not have the job of displaying the environment after each movement and how 
	the fish act because that job is up to the step method initiated with the Simulation class.

Analysis Questions Set 2:
	1. (6,3) (7,4) (8,3) (7,2)
	
	2. East
	
	3. South, North
	
	4. (6,3)
	
	5. (5,3)
	
	6. Location has a constructor for row and column parameters and then it also has equals, 
	compareTo, hashCode and toString
	compareTo - compares two locations for ordering
	hashCode - generates a hashCode for the location
	toString - makes the location be represented by a string and outputs a location. This 
	could be used to print the location of a fish if something isn't working to see where it
	is.
	Direction has three constructors - one with no parameters that sets direction to North, 
	one with one parameter that is degrees and another one with one parameter that is direction
	in string form.
	
	Direction has some public methods as well:
	inDegrees - returns the direction value in degrees
	equals(Object other) - checks if other is the same direction as the other direction then 
	returns true or false.
	toLeft - returns a direction 90 degrees to the left of the given direction
	toRight - returns direction 90 degrees to the right of the given direction
	toLeft(int degrees) - returns a direction int degrees to the left of the given direction
	toRight(int degrees) - returns a direction int degrees to the right of the given direction 
	reverse - returns direction reverse of the direction given
	toString - represents direction as string
	randomDirection - returns a random direction in 0 to 360 degrees
	roundedDir - rounds given direction to nearest "cardinal" direction and returns it
	hashCode - makes a hash code for the given Direction object
	
	toString can be used for debugging if needed it can send the direction of the fish.
	
	 
	
Exercise Set 1:
	Complete? yes (file called Chpt2ExercisesSet1)
	
	2. North = 0, East = 90, South = 180, West = 270 and dir3 = 0
	

For later exercises:

Analysis Questions Set 3:
	1. two
	
	2. 2(2, 6)North, 1(7,3)South 
	
	3. false
	
	4. true
	
	5. 2(2,6)North
	
	6. null
	
	7. No because a fish constructor adds the fish to the Environment, so there is no reason to add it again. 
	The fish and the environment need to agree on where the fish is and so the fish is the one to add itself
	so when it is constructed both the constructor and the fish have the same location for it.
	
	8. It is private because you wouldn't want anything else to change the fish location or direction. The fish 
	could move somewhere else because a code messed with initialize and therefore messing up the environment and fish. 
	
	9. You could make theEnv a class variable but if you do that all the fish will live in the same environment 
	and you could not display two simulations at the same time, as you could if theEnv stayed as an instance variable.
	
Exercise Set 2:
	1. Driver made? yes
	
	2. yes is empty does behave as expected giving the one I removed true and the one I did not remove false.
	
	3. Adding this string to my Driver gave me an Error saying Location (8, 8) is not a valid empty location
	at BoundedEnv.add... So this is not a valid empty location. A fish cannot be added at this location because it
	either is taken or it is not a valid place.
	


Analysis Questions Set 4:	
	1. The fish starts in a consistent state because when adding a fish to the environment, the environment takes 
	the fish and it locations and adds it to the environment. So the fish and the environment agree on the fish's
	location. 
	
	2. If a fish is removed from the environment, then it will still believe it is at a particular location. The 
	fish is the one holding the location, keeping track of it. This would therefore put the fish in an inconsistent 
	state because it is not linked with the environment. Also if the method recordMove in Environment does not 
	fully work the fish could change to an inconsistent state. 	
	
Analysis Question Set 5:
	1. true, true
	
	2. false, false
	
	3. false, true

Analysis Question Set 6:
	1. The the neighborsOf method returns all valid neighboring locations, not just those that are empty. The 
	emptyNeighbors code that obtains a fish's empty neighbors from the environment could have been included in
	nextLocation but each method is better when preforming one defined tasked and not two or three. We do not
	want to over load nextLocation so emptyNeighbors was made to spread it out.
	
Exercise Set 3:
	1. Made set 3 class instead of modifying set 2, but does the same thing
	
	2. Location (0, 0) has 2 neighbors
	   Location (0, 1) has 3 neighbors
	   Location (1, 1) has 4 neighbors
	   The neighbors of location (0, 0) are: (0, 1) (1, 0) 
	   The neighbors of location (0, 1) are: (0, 2) (1, 1) (0, 0) 
	   The neighbors of location (1, 1) are: (0, 2) (1, 1) (0, 0) 
	
	3. All four corners will have 2 neighbors, all boundry locations will have 3 neighbors and all interior 
	locations will have 4. So for example (19, 19) will have 2 neighbors because it is a corner, (0, 18) will 
	have 3 because it is an edge location. 
	
Analysis Question Set 7:
	1. In each diagram the fish location (1,0) has three neighbors.

	2. 
		a. 1   
		b. 1   
		c. 2   
		d. 3

	3. 
		a. none
		b. (1, 1)
		c. (1, 1), (2, 0)
		d. (0, 0), (1, 1), (2, 0)

	
Analysis Question Set 8:
	1. For the fish in location (2, 2)
		- move will call nextLocation
		- nextLocation will call emptyNeighbors
		- emptyNeighbors will first get a list of the four neighbors around location (2, 2), nbrs and then 
		  determine and return a list of empty neighbors, (1, 2), (2, 1) and (2, 3)
		- oppositeDir will then be set to the location behing the fish , (2, 1) and that location will be 
		  removed from the list of empty neighbors.
		- If there are no empty neighbors to select a new location from, the fishs current location is returned, 
		  but in this case there are still two empty neighbors left.
		- An index is otherwise randomly selected and the location of the empty neighbors at that index returned
		- the fish in location (2, 2) might move to (1, 2) or (2, 3) depending on the randomly chosen index.

	2. a new instance variable name myAge would have to be initialized in the initialize method and incremented, 
	"upon each time step the fish age is incremented by 1". To get the age you will need another method (age) and 
	maybe in the end modify the toString method to print the age.

	
Exercise Set 4:
	1. Code to change color added? yes

	2. Code to construct Fish using third fish constructor? yes in Chapt2ExerciseSets4

Analysis Question Set 9:
	1.
	
	2.
	
	3.
	
Exercise Set 5:
	1.
	
	2.
	
	3.
	
	4.
	
	5.
	
	6.
	
	7.
	
Analysis Question Set 10:
	1.
	
	2.
	
	3.
	
	4. 
	
	5.				
	
		